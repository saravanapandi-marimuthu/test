// <auto-generated />
using System;
using System.Text.Json;
using Horizen.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Horizen.Data.Migrations
{
    [DbContext(typeof(HorizenDbContext))]
    partial class HorizenDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Horizen.Data.Domain.Accounts.Entities.BillingAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountClassification")
                        .HasColumnType("integer");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("AccountSubType")
                        .HasColumnType("integer");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExternalAccountId")
                        .HasColumnType("text");

                    b.Property<string>("ExternalAccountName")
                        .HasColumnType("text");

                    b.Property<string>("ExternalSubAccountName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ParentAccountId")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BillingAccounts");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Accounts.Entities.TransactionJournalEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BillingAccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Credit")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Debit")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BillingAccountId");

                    b.ToTable("TransactionJournalEntries");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Billing.Entities.BillingAccountSplitAllocation", b =>
                {
                    b.Property<int>("SplitGroupAccountId")
                        .HasColumnType("integer");

                    b.Property<int>("SplitItemId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<float>("SplitValue")
                        .HasColumnType("real");

                    b.Property<int>("SplitValueType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("SplitGroupAccountId", "SplitItemId");

                    b.ToTable("BillingAccountSplitAllocations");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Billing.Entities.BillingSplitGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BillingSplitItemId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DefaultSplitItemId")
                        .HasColumnType("integer");

                    b.Property<JsonDocument>("ExtendedProperties")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("SplitGroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BillingSplitItemId");

                    b.HasIndex("DefaultSplitItemId");

                    b.ToTable("BillingSplitGroups");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Billing.Entities.BillingSplitGroupAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AccountCompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("SplitGroupId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountCompanyId");

                    b.HasIndex("SplitGroupId");

                    b.ToTable("BillingSplitGroupAccounts");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Billing.Entities.BillingSplitItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ParentSplitItemId")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("SplitGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("SplitTierId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentSplitItemId");

                    b.HasIndex("SplitGroupId");

                    b.HasIndex("SplitTierId");

                    b.ToTable("BillingSplitItems");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Common.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Common.Entities.GeoLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Accuracy")
                        .HasColumnType("double precision");

                    b.Property<double?>("Altitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Point>("Point")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GeoLocations");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Common.Entities.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MainNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Companies.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<string>("HomepageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCompanyId")
                        .HasColumnType("uuid");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("ServiceType")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.HasIndex("ParentCompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Companies.Entities.CompanyAddress", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("AddressType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("CompanyId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("CompanyAddresses");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Companies.Entities.CompanyExternalServiceAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyExternalServiceAccounts");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Companies.Entities.CompanyFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Feature")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyFeatures");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Companies.Entities.CompanyPhoneNumber", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PhoneNumberType")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("CompanyId", "PhoneNumberId");

                    b.HasIndex("PhoneNumberId");

                    b.ToTable("CompanyPhoneNumbers");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Companies.Entities.CompanyPreset", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencyFormat")
                        .HasColumnType("text");

                    b.Property<string>("CurrencySymbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DateTimeFormat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DefaultPaymentTermId")
                        .HasColumnType("integer");

                    b.Property<string>("InvoiceNumberFormat")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceNumberPrefix")
                        .HasColumnType("text");

                    b.Property<int>("InvoiceStartingNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PurchaseOrderNumberFormat")
                        .HasColumnType("text");

                    b.Property<string>("PurchaseOrderNumberPrefix")
                        .HasColumnType("text");

                    b.Property<int>("PurchaseOrderStartingNumber")
                        .HasColumnType("integer");

                    b.Property<string>("RetailOrderNumberFormat")
                        .HasColumnType("text");

                    b.Property<string>("RetailOrderNumberPrefix")
                        .HasColumnType("text");

                    b.Property<int>("RetailOrderStartingNumber")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("TimeFormat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("CompanyId");

                    b.HasIndex("DefaultPaymentTermId");

                    b.ToTable("CompanySettings");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Companies.Entities.CompanyTag", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("CompanyId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("CompanyTags");
                });

            modelBuilder.Entity("Horizen.Data.Domain.CompanyRelationships.Entities.CompanyRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyRelationshipStatus")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyRelationshipType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("PrimaryCompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RelatedCompanyId")
                        .HasColumnType("uuid");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryCompanyId");

                    b.HasIndex("RelatedCompanyId");

                    b.ToTable("CompanyRelationships");
                });

            modelBuilder.Entity("Horizen.Data.Domain.CompanyRelationships.Entities.CompanyRelationshipAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyRelationshipId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("ThumbnailMimeType")
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailPath")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyRelationshipId");

                    b.ToTable("CompanyRelationshipAttachments");
                });

            modelBuilder.Entity("Horizen.Data.Domain.CompanyRelationships.Entities.CompanyRelationshipTag", b =>
                {
                    b.Property<int>("CompanyRelationshipId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("CompanyRelationshipId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("CompanyRelationshipTags");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Configurations.Entities.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BasePackageId")
                        .HasColumnType("integer");

                    b.Property<int>("ColorIndex")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemsPerPackage")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PackagesPerPallet")
                        .HasColumnType("integer");

                    b.Property<decimal>("QuantityPerItem")
                        .HasColumnType("numeric");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BasePackageId");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.HasIndex("UnitId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Configurations.Entities.PaymentTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DueDays")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("TermName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentTerms");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Configurations.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorIndex")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("TagCategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TagCategoryId", "NormalizedName")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Configurations.Entities.TagCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorIndex")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("TagCategories");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Configurations.Entities.UnitOfMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("ColorIndex")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ConversionFactor")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("DenominatorMultiplier")
                        .HasColumnType("numeric");

                    b.Property<int?>("DenominatorUnitId")
                        .HasColumnType("integer");

                    b.Property<int?>("DenominatorUnitType")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("NumeratorMultiplier")
                        .HasColumnType("numeric");

                    b.Property<int?>("NumeratorUnitId")
                        .HasColumnType("integer");

                    b.Property<int?>("NumeratorUnitType")
                        .HasColumnType("integer");

                    b.Property<string>("PluralName")
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("SingularName")
                        .HasColumnType("text");

                    b.Property<int>("UnitOfMeasurementType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("DenominatorUnitId");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.HasIndex("NumeratorUnitId");

                    b.ToTable("UnitOfMeasurements");
                });

            modelBuilder.Entity("Horizen.Data.Domain.CustomerDeliveryLocations.Entities.CustomerDeliveryLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("DeliverLocationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerDeliveryLocations");
                });

            modelBuilder.Entity("Horizen.Data.Domain.CustomerDeliveryLocations.Entities.CustomerDeliveryLocationAddress", b =>
                {
                    b.Property<int>("DeliveryLocationId")
                        .HasColumnType("integer");

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("AddressType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("DeliveryLocationId", "AddressId", "AddressType");

                    b.HasIndex("AddressId");

                    b.ToTable("CustomerDeliveryLocationAddresses");
                });

            modelBuilder.Entity("Horizen.Data.Domain.CustomerDeliveryLocations.Entities.CustomerDeliveryLocationPhoneNumber", b =>
                {
                    b.Property<int>("DeliveryLocationId")
                        .HasColumnType("integer");

                    b.Property<int>("PhoneNumberType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("DeliveryLocationId", "PhoneNumberType");

                    b.ToTable("CustomerDeliveryLocationPhoneNumbers");
                });

            modelBuilder.Entity("Horizen.Data.Domain.EnterpriseItems.Entities.EnterpriseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BillingSplitGroupId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<JsonDocument>("ExtendedProperties")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("ItemId", "ItemTypeId");

                    b.HasIndex("BillingSplitGroupId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("EnterpriseItems");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Fields.Entities.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<JsonDocument>("ExtendedProperties")
                        .HasColumnType("jsonb");

                    b.Property<int?>("GeoLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PlssLocation")
                        .HasColumnType("text");

                    b.Property<string>("PlssLocationState")
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("CompanyId", "NormalizedName");

                    b.HasIndex("GeoLocationId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Fields.Entities.FieldLayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Area")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<JsonDocument>("ExtendedProperties")
                        .HasColumnType("jsonb");

                    b.Property<int>("FieldVersionId")
                        .HasColumnType("integer");

                    b.Property<int?>("GeoLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LayerDescription")
                        .HasColumnType("text");

                    b.Property<string>("LayerFileName")
                        .HasColumnType("text");

                    b.Property<Geometry>("LayerGeometry")
                        .HasColumnType("geometry");

                    b.Property<string>("LayerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LayerType")
                        .HasColumnType("integer");

                    b.Property<bool>("ManuallyGenerated")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("FieldVersionId", "LayerType", "ManuallyGenerated", "LayerName");

                    b.ToTable("FieldLayers");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Fields.Entities.FieldLayerZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Area")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<JsonDocument>("ExtendedProperties")
                        .HasColumnType("jsonb");

                    b.Property<int>("FieldLayerId")
                        .HasColumnType("integer");

                    b.Property<int>("GeoLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Geometry>("LayerZoneGeometry")
                        .HasColumnType("geometry");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("ZoneColor")
                        .HasColumnType("text");

                    b.Property<string>("ZoneDescription")
                        .HasColumnType("text");

                    b.Property<string>("ZoneFileName")
                        .HasColumnType("text");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("ZoneOpacity")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FieldLayerId");

                    b.HasIndex("GeoLocationId");

                    b.ToTable("FieldLayerZones");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Fields.Entities.FieldTag", b =>
                {
                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("FieldId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("FieldTags");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Fields.Entities.FieldVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<float?>("CalculatedArea")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float?>("EstimatedArea")
                        .HasColumnType("real");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("FieldVersions");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Fields.Entities.FieldVersionTag", b =>
                {
                    b.Property<int>("FieldVersionId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("FieldVersionId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("FieldVersionTags");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Freight.Entities.FreightProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<JsonDocument>("ExtendedProperties")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FreightProviders");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Freight.Entities.FreightRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<JsonDocument>("ExtendedProperties")
                        .HasColumnType("jsonb");

                    b.Property<int>("FreightProviderId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<float?>("MaxVolume")
                        .HasColumnType("real");

                    b.Property<float?>("MaxWeight")
                        .HasColumnType("real");

                    b.Property<float?>("MinVolume")
                        .HasColumnType("real");

                    b.Property<float?>("MinWeight")
                        .HasColumnType("real");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FreightProviderId");

                    b.HasIndex("ZoneId");

                    b.ToTable("FreightRates");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Freight.Entities.FreightZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FreightRateZones");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Inventory.Entities.InventoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("InStockQuantity")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("StorageLocationId")
                        .HasColumnType("integer");

                    b.Property<int>("UnitOfMeasurementId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("ProductId", "WarehouseId", "CompanyId", "StorageLocationId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Inventory.Entities.InventoryItemLotInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InventoryTransactionLedgerEntryId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LotNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("InventoryTransactionLedgerEntryId", "LotNumber");

                    b.ToTable("InventoryItemLotInfos");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Inventory.Entities.InventoryItemLotInfoBarCodeEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InventoryLotInfoId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("InventoryLotInfoId", "Barcode");

                    b.ToTable("InventoryItemLotInfoBarCodeEntries");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Inventory.Entities.InventoryTransactionLedgerEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("Cost")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InventoryItemId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LedgerEntryType")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("PackageId")
                        .HasColumnType("integer");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("PurchaseOrderLineItemId")
                        .HasColumnType("integer");

                    b.Property<float>("QuantityChangeByPackage")
                        .HasColumnType("real");

                    b.Property<int?>("RetailOrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("RetailOrderLineItemId")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("TransactionSubType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("PackageId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("PurchaseOrderLineItemId");

                    b.HasIndex("RetailOrderId");

                    b.HasIndex("RetailOrderLineItemId");

                    b.ToTable("InventoryTransactionLedgerEntries");
                });

            modelBuilder.Entity("Horizen.Data.Domain.ManufacturerProducts.Entities.ManufacturerPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ManufacturerProductId")
                        .HasColumnType("integer");

                    b.Property<decimal>("MapPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MsrpPrice")
                        .HasColumnType("numeric");

                    b.Property<bool>("Override")
                        .HasColumnType("boolean");

                    b.Property<int>("PackageId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PackagePrice")
                        .HasColumnType("numeric");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerProductId");

                    b.HasIndex("PackageId");

                    b.ToTable("ManufacturerPrices");
                });

            modelBuilder.Entity("Horizen.Data.Domain.ManufacturerProducts.Entities.ManufacturerProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BarCode")
                        .HasColumnType("text");

                    b.Property<string>("CommonName")
                        .HasColumnType("text");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EPA")
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<string>("GaPageParam")
                        .HasColumnType("text");

                    b.Property<bool?>("HasIcon")
                        .HasColumnType("boolean");

                    b.Property<string>("IconUI")
                        .HasColumnType("text");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsCanada")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCoPack")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUs")
                        .HasColumnType("boolean");

                    b.Property<string>("LabelDAT")
                        .HasColumnType("text");

                    b.Property<int>("LogoId")
                        .HasColumnType("integer");

                    b.Property<int>("ManId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ManufacturerCompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ManufacturerName")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProductCategory")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductSku")
                        .HasColumnType("text");

                    b.Property<int?>("ProductType")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("UPC")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ManufacturerCompanyId");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("ManufacturerProducts");
                });

            modelBuilder.Entity("Horizen.Data.Domain.ManufacturerProducts.Entities.ProductAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAvailabilities");
                });

            modelBuilder.Entity("Horizen.Data.Domain.ManufacturerProducts.Entities.ProductDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DocId")
                        .HasColumnType("integer");

                    b.Property<string>("DocType")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LabelFolder")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("SiteUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDocuments");
                });

            modelBuilder.Entity("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BillingAccountId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOrdered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<JsonDocument>("ExtendedProperties")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentTermsId")
                        .HasColumnType("integer");

                    b.Property<int?>("RetailOrderId")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("VendorCompanyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasAlternateKey("CompanyId", "OrderNumber");

                    b.HasIndex("BillingAccountId");

                    b.HasIndex("PaymentTermsId");

                    b.HasIndex("RetailOrderId");

                    b.HasIndex("VendorCompanyId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrderApprover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<JsonDocument>("ExtendedProperties")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserRoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderApprovers");
                });

            modelBuilder.Entity("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrderDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("AppliedAmount")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<JsonDocument>("ExtendedProperties")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("boolean");

                    b.Property<int?>("LineItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("LineItemId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderDiscounts");
                });

            modelBuilder.Entity("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrderFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("AppliedAmount")
                        .HasColumnType("real");

                    b.Property<bool>("ApplyAfterDiscount")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<JsonDocument>("ExtendedProperties")
                        .HasColumnType("jsonb");

                    b.Property<int>("FeeTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FeeTypeId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderFees");
                });

            modelBuilder.Entity("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrderLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<JsonDocument>("ExtendedProperties")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<float?>("OrderQtyByPackage")
                        .HasColumnType("real");

                    b.Property<float>("OrderedQty")
                        .HasColumnType("real");

                    b.Property<int>("PackageId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("integer");

                    b.Property<float?>("ReceivedQty")
                        .HasColumnType("real");

                    b.Property<float?>("ReceivedQtyByPackage")
                        .HasColumnType("real");

                    b.Property<string>("RegulatoryInfo")
                        .HasColumnType("text");

                    b.Property<string>("ReturnPolicy")
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("SdsUrl")
                        .HasColumnType("text");

                    b.Property<string>("SpecialHandlingInstructions")
                        .HasColumnType("text");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<int>("UnitOfMeasurementId")
                        .HasColumnType("integer");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.Property<float?>("UnitPriceByPackage")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("PurchaseOrderLineItems");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Rebates.Entities.ManufacturerRebate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ManufacturerProductId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RebateConditionId")
                        .HasColumnType("integer");

                    b.Property<Guid>("RetailerCompanyId")
                        .HasColumnType("uuid");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RebateConditionId");

                    b.ToTable("Rebates");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Rebates.Entities.RebateCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MinPurchaseAmount")
                        .HasColumnType("numeric");

                    b.Property<int?>("MinPurchaseQuantity")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RebateCondition");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailOrders.Entities.RetailOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CustomerCompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderType")
                        .HasColumnType("integer");

                    b.Property<Guid>("RetailerCompanyId")
                        .HasColumnType("uuid");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasAlternateKey("RetailerCompanyId", "OrderNumber");

                    b.HasIndex("CustomerCompanyId");

                    b.ToTable("RetailOrders");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailOrders.Entities.RetailOrderComponentOverride", b =>
                {
                    b.Property<int>("OrderItemId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderComponentId")
                        .HasColumnType("integer");

                    b.Property<int>("RetailerProductComponentId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CompositionPercentage")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MeasurementValue")
                        .HasColumnType("numeric");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int?>("UnitOfMeasurementId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("OrderItemId", "OrderComponentId", "RetailerProductComponentId");

                    b.HasIndex("OrderComponentId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("RetailOrderComponentOverrides");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailOrders.Entities.RetailOrderFieldInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("BillableAcres")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CropId")
                        .HasColumnType("integer");

                    b.Property<float>("EstimatedAcres")
                        .HasColumnType("real");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("OrderId", "FieldId");

                    b.HasIndex("CropId");

                    b.HasIndex("FieldId");

                    b.ToTable("RetailOrderFieldInfos");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailOrders.Entities.RetailOrderItemTag", b =>
                {
                    b.Property<int>("OrderItemId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("OrderItemId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("RetailOrderItemTags");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailOrders.Entities.RetailOrderLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("PackageId")
                        .HasColumnType("integer");

                    b.Property<int?>("PackageQuantity")
                        .HasColumnType("integer");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("RetailerProductId")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("UnitOfMeasurementId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PackageId");

                    b.HasIndex("RetailerProductId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("RetailOrderLineItems");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailOrders.Entities.RetailOrderLineItemSchedule", b =>
                {
                    b.Property<int>("RetailOrderLineItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RetailOrderLineItemId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("ScheduleStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ScheduleStatusReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("RetailOrderLineItemId");

                    b.ToTable("RetailOrderLineItemSchedules");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailOrders.Entities.RetailOrderTag", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("OrderId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("RetailOrderTags");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailerProducts.Entities.RetailerProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BrochureUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("ProductCategory")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProductType")
                        .HasColumnType("integer");

                    b.Property<Guid>("RetailerCompanyId")
                        .HasColumnType("uuid");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Sku")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.HasIndex("RetailerCompanyId");

                    b.ToTable("RetailerProducts");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailerProducts.Entities.RetailerProductComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CompositionPercentage")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ManufacturerProductId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MeasurementValue")
                        .HasColumnType("numeric");

                    b.Property<int>("RetailerProductId")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int?>("UnitOfMeasurementId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("RetailerProductId", "ManufacturerProductId");

                    b.HasIndex("ManufacturerProductId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("RetailerProductComponents");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailerProducts.Entities.RetailerProductComponentCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCostOverridden")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("PackageCost")
                        .HasColumnType("numeric");

                    b.Property<int>("PackageId")
                        .HasColumnType("integer");

                    b.Property<Guid>("RetailerCompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("RetailerProductComponentId")
                        .HasColumnType("integer");

                    b.Property<int>("RetailerProductId")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("RetailerProductComponentId", "IsCostOverridden", "PackageId", "StartDate");

                    b.HasIndex("PackageId");

                    b.HasIndex("RetailerProductId");

                    b.ToTable("RetailerProductComponentCosts");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailerProducts.Entities.RetailerProductDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RetailProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("RetailerProductDiscounts");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailerProducts.Entities.RetailerProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPriceOverridden")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MapPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MsrpPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("PackageId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PackagePrice")
                        .HasColumnType("numeric");

                    b.Property<int>("RetailerProductId")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("RetailerProductId", "IsPriceOverridden", "PackageId", "StartDate");

                    b.HasIndex("PackageId");

                    b.ToTable("RetailerPrices");
                });

            modelBuilder.Entity("Horizen.Data.Domain.UserRoles.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AclOverrides")
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Users.Entities.ExternalUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExternalUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExternalUserId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ExternalUsers");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid?>("SelectedUserRoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique();

                    b.HasIndex("SelectedUserRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Users.Entities.UserAddress", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("AddressType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("UserId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Users.Entities.UserInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("RedeemedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ResentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedBy")
                        .HasColumnType("text");

                    b.Property<string>("RevokedReason")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique();

                    b.ToTable("UserInvites");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Users.Entities.UserPhoneNumber", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PhoneNumberType")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("UserId", "PhoneNumberId");

                    b.HasIndex("PhoneNumberId");

                    b.ToTable("UserPhoneNumbers");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Users.Entities.UserSettings", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarFallbackUrl")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("DarkMode")
                        .HasColumnType("boolean");

                    b.Property<JsonDocument>("ExtendedProperties")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Users.Entities.UserTag", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("UserId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("UserTags");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Warehouses.Entities.StorageLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("ParentStorageLocationId")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("StorageLocationTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentStorageLocationId");

                    b.HasIndex("StorageLocationTypeId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StorageLocations");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Warehouses.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("RetailerCompanyId")
                        .HasColumnType("uuid");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RetailerCompanyId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Warehouses.Entities.WarehouseAddress", b =>
                {
                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("AddressType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("WarehouseId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("WarehouseAddresses");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Warehouses.Entities.WarehousePhoneNumber", b =>
                {
                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.Property<int>("PhoneNumberId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PhoneNumberType")
                        .HasColumnType("integer");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("WarehouseId", "PhoneNumberId");

                    b.HasIndex("PhoneNumberId");

                    b.ToTable("WarehousePhoneNumbers");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Accounts.Entities.BillingAccount", b =>
                {
                    b.OwnsOne("Horizen.Data.Domain.Accounts.Entities.BillingAccountExtendedProperties", "ExtendedProperties", b1 =>
                        {
                            b1.Property<int>("BillingAccountId")
                                .HasColumnType("integer");

                            b1.Property<string>("Version")
                                .HasColumnType("text");

                            b1.HasKey("BillingAccountId");

                            b1.ToTable("BillingAccounts");

                            b1.WithOwner()
                                .HasForeignKey("BillingAccountId");
                        });

                    b.Navigation("ExtendedProperties")
                        .IsRequired();
                });

            modelBuilder.Entity("Horizen.Data.Domain.Accounts.Entities.TransactionJournalEntry", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Accounts.Entities.BillingAccount", "BillingAccount")
                        .WithMany("JournalEntries")
                        .HasForeignKey("BillingAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingAccount");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Billing.Entities.BillingAccountSplitAllocation", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Billing.Entities.BillingSplitItem", "SplitItem")
                        .WithMany("BillingAccountSplitAllocations")
                        .HasForeignKey("SplitGroupAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SplitItem");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Billing.Entities.BillingSplitGroup", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Billing.Entities.BillingSplitItem", null)
                        .WithMany("SplitGroups")
                        .HasForeignKey("BillingSplitItemId");

                    b.HasOne("Horizen.Data.Domain.Billing.Entities.BillingSplitItem", "DefaultSplitItem")
                        .WithMany()
                        .HasForeignKey("DefaultSplitItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DefaultSplitItem");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Billing.Entities.BillingSplitGroupAccount", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "AccountCompany")
                        .WithMany("BillingSplitGroupAccounts")
                        .HasForeignKey("AccountCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Billing.Entities.BillingSplitGroup", "SplitGroup")
                        .WithMany("BillingSplitGroupAccounts")
                        .HasForeignKey("SplitGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountCompany");

                    b.Navigation("SplitGroup");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Billing.Entities.BillingSplitItem", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Billing.Entities.BillingSplitItem", "ParentSplitItem")
                        .WithMany("ChildSplitItems")
                        .HasForeignKey("ParentSplitItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Horizen.Data.Domain.Billing.Entities.BillingSplitGroup", "SplitGroup")
                        .WithMany("SplitItems")
                        .HasForeignKey("SplitGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Tag", "SplitTier")
                        .WithMany()
                        .HasForeignKey("SplitTierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentSplitItem");

                    b.Navigation("SplitGroup");

                    b.Navigation("SplitTier");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Companies.Entities.Company", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "ParentCompany")
                        .WithMany("ChildCompanies")
                        .HasForeignKey("ParentCompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Horizen.Data.Domain.Companies.Entities.CompanyExtendedProperties", "ExtendedProperties", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("GaPageParam")
                                .HasColumnType("text");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("ExtendedProperties")
                        .IsRequired();

                    b.Navigation("ParentCompany");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Companies.Entities.CompanyAddress", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Common.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "Company")
                        .WithMany("CompanyAddresses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Companies.Entities.CompanyExternalServiceAccount", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "Company")
                        .WithMany("CompanyExternalServiceAccounts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Companies.Entities.CompanyFeature", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "Company")
                        .WithMany("CompanyFeatures")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Companies.Entities.CompanyPhoneNumber", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "Company")
                        .WithMany("CompanyPhoneNumbers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Common.Entities.PhoneNumber", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Companies.Entities.CompanyPreset", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "Company")
                        .WithMany("CompanyPresets")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.PaymentTerm", "DefaultPaymentTerm")
                        .WithMany()
                        .HasForeignKey("DefaultPaymentTermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Horizen.Data.Domain.Companies.Entities.CompanyPresetExtendedProperties", "ExtendedProperties", b1 =>
                        {
                            b1.Property<Guid>("CompanyPresetCompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Version")
                                .HasColumnType("text");

                            b1.HasKey("CompanyPresetCompanyId");

                            b1.ToTable("CompanySettings");

                            b1.WithOwner()
                                .HasForeignKey("CompanyPresetCompanyId");
                        });

                    b.Navigation("Company");

                    b.Navigation("DefaultPaymentTerm");

                    b.Navigation("ExtendedProperties")
                        .IsRequired();
                });

            modelBuilder.Entity("Horizen.Data.Domain.Companies.Entities.CompanyTag", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "Company")
                        .WithMany("CompanyTags")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Horizen.Data.Domain.CompanyRelationships.Entities.CompanyRelationship", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "PrimaryCompany")
                        .WithMany("FirstCompanyRelationships")
                        .HasForeignKey("PrimaryCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "RelatedCompany")
                        .WithMany("SecondCompanyRelationships")
                        .HasForeignKey("RelatedCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PrimaryCompany");

                    b.Navigation("RelatedCompany");
                });

            modelBuilder.Entity("Horizen.Data.Domain.CompanyRelationships.Entities.CompanyRelationshipAttachment", b =>
                {
                    b.HasOne("Horizen.Data.Domain.CompanyRelationships.Entities.CompanyRelationship", "CompanyRelationship")
                        .WithMany("Attachments")
                        .HasForeignKey("CompanyRelationshipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyRelationship");
                });

            modelBuilder.Entity("Horizen.Data.Domain.CompanyRelationships.Entities.CompanyRelationshipTag", b =>
                {
                    b.HasOne("Horizen.Data.Domain.CompanyRelationships.Entities.CompanyRelationship", "CompanyRelationship")
                        .WithMany("CompanyRelationshipTags")
                        .HasForeignKey("CompanyRelationshipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyRelationship");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Configurations.Entities.Package", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Package", "BasePackage")
                        .WithMany("DependentPackages")
                        .HasForeignKey("BasePackageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.UnitOfMeasurement", "Unit")
                        .WithMany("Packages")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasePackage");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Configurations.Entities.Tag", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.TagCategory", "TagCategory")
                        .WithMany("Tags")
                        .HasForeignKey("TagCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TagCategory");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Configurations.Entities.UnitOfMeasurement", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.UnitOfMeasurement", "BaseUnit")
                        .WithMany("DependentUnits")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.UnitOfMeasurement", "DenominatorUnit")
                        .WithMany()
                        .HasForeignKey("DenominatorUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.UnitOfMeasurement", "NumeratorUnit")
                        .WithMany()
                        .HasForeignKey("NumeratorUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BaseUnit");

                    b.Navigation("DenominatorUnit");

                    b.Navigation("NumeratorUnit");
                });

            modelBuilder.Entity("Horizen.Data.Domain.CustomerDeliveryLocations.Entities.CustomerDeliveryLocation", b =>
                {
                    b.HasOne("Horizen.Data.Domain.CompanyRelationships.Entities.CompanyRelationship", "Customer")
                        .WithMany("CustomerDeliveryLocations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Horizen.Data.Domain.CustomerDeliveryLocations.Entities.CustomerDeliveryLocationAddress", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Common.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.CustomerDeliveryLocations.Entities.CustomerDeliveryLocation", "DeliveryLocation")
                        .WithMany("Addresses")
                        .HasForeignKey("DeliveryLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("DeliveryLocation");
                });

            modelBuilder.Entity("Horizen.Data.Domain.CustomerDeliveryLocations.Entities.CustomerDeliveryLocationPhoneNumber", b =>
                {
                    b.HasOne("Horizen.Data.Domain.CustomerDeliveryLocations.Entities.CustomerDeliveryLocation", "DeliveryLocation")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("DeliveryLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DeliveryLocation");
                });

            modelBuilder.Entity("Horizen.Data.Domain.EnterpriseItems.Entities.EnterpriseItem", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Billing.Entities.BillingSplitGroup", "BillingSplitGroup")
                        .WithMany("EnterpriseItems")
                        .HasForeignKey("BillingSplitGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "Company")
                        .WithMany("EnterpriseItems")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Tag", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingSplitGroup");

                    b.Navigation("Company");

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Fields.Entities.Field", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "Company")
                        .WithMany("Fields")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Common.Entities.GeoLocation", "GeoLocation")
                        .WithMany()
                        .HasForeignKey("GeoLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("GeoLocation");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Fields.Entities.FieldLayer", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Fields.Entities.FieldVersion", "FieldVersion")
                        .WithMany("FieldLayers")
                        .HasForeignKey("FieldVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FieldVersion");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Fields.Entities.FieldLayerZone", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Fields.Entities.FieldLayer", "FieldLayer")
                        .WithMany("FieldLayerZones")
                        .HasForeignKey("FieldLayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Common.Entities.GeoLocation", "GeoLocation")
                        .WithMany()
                        .HasForeignKey("GeoLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FieldLayer");

                    b.Navigation("GeoLocation");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Fields.Entities.FieldTag", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Fields.Entities.Field", "Field")
                        .WithMany("FieldTags")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Fields.Entities.FieldVersion", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Fields.Entities.Field", "Field")
                        .WithMany("FieldVersions")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Fields.Entities.FieldVersionTag", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Fields.Entities.FieldVersion", "FieldVersion")
                        .WithMany("FieldVersionTags")
                        .HasForeignKey("FieldVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FieldVersion");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Freight.Entities.FreightRate", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Freight.Entities.FreightProvider", "FreightProvider")
                        .WithMany("FreightRates")
                        .HasForeignKey("FreightProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Freight.Entities.FreightZone", "Zone")
                        .WithMany("Rates")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FreightProvider");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Inventory.Entities.InventoryItem", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.ManufacturerProducts.Entities.ManufacturerProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Warehouses.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Product");

                    b.Navigation("UnitOfMeasurement");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Inventory.Entities.InventoryItemLotInfo", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Inventory.Entities.InventoryTransactionLedgerEntry", "LedgerEntry")
                        .WithMany("InventoryItemLots")
                        .HasForeignKey("InventoryTransactionLedgerEntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LedgerEntry");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Inventory.Entities.InventoryItemLotInfoBarCodeEntry", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Inventory.Entities.InventoryItemLotInfo", "LotInfo")
                        .WithMany("BarCodeEntries")
                        .HasForeignKey("InventoryLotInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LotInfo");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Inventory.Entities.InventoryTransactionLedgerEntry", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Inventory.Entities.InventoryItem", "InventoryItem")
                        .WithMany("LedgerEntries")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrderLineItem", "PurchaseOrderLineItem")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderLineItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Horizen.Data.Domain.RetailOrders.Entities.RetailOrder", "RetailOrder")
                        .WithMany()
                        .HasForeignKey("RetailOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Horizen.Data.Domain.RetailOrders.Entities.RetailOrderLineItem", "RetailOrderLineItem")
                        .WithMany()
                        .HasForeignKey("RetailOrderLineItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InventoryItem");

                    b.Navigation("Package");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("PurchaseOrderLineItem");

                    b.Navigation("RetailOrder");

                    b.Navigation("RetailOrderLineItem");
                });

            modelBuilder.Entity("Horizen.Data.Domain.ManufacturerProducts.Entities.ManufacturerPrice", b =>
                {
                    b.HasOne("Horizen.Data.Domain.ManufacturerProducts.Entities.ManufacturerProduct", "ManufacturerProduct")
                        .WithMany("Prices")
                        .HasForeignKey("ManufacturerProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ManufacturerProduct");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Horizen.Data.Domain.ManufacturerProducts.Entities.ManufacturerProduct", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", null)
                        .WithMany("ManufacturerProducts")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "ManufacturerCompany")
                        .WithMany()
                        .HasForeignKey("ManufacturerCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ManufacturerCompany");
                });

            modelBuilder.Entity("Horizen.Data.Domain.ManufacturerProducts.Entities.ProductAvailability", b =>
                {
                    b.HasOne("Horizen.Data.Domain.ManufacturerProducts.Entities.ManufacturerProduct", "Product")
                        .WithMany("ProductAvailabilities")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Horizen.Data.Domain.ManufacturerProducts.Entities.ProductDocument", b =>
                {
                    b.HasOne("Horizen.Data.Domain.ManufacturerProducts.Entities.ManufacturerProduct", "Product")
                        .WithMany("ProductDocuments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Accounts.Entities.BillingAccount", "BillingAccount")
                        .WithMany()
                        .HasForeignKey("BillingAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "Company")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.RetailOrders.Entities.RetailOrder", "RetailOrder")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("RetailOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "VendorCompany")
                        .WithMany("VendorPurchaseOrders")
                        .HasForeignKey("VendorCompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BillingAccount");

                    b.Navigation("Company");

                    b.Navigation("PaymentTerm");

                    b.Navigation("RetailOrder");

                    b.Navigation("VendorCompany");
                });

            modelBuilder.Entity("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrderApprover", b =>
                {
                    b.HasOne("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderApprovers")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrderDiscount", b =>
                {
                    b.HasOne("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrderLineItem", "LineItem")
                        .WithMany("PurchaseOrderDiscounts")
                        .HasForeignKey("LineItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDiscounts")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LineItem");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrderFee", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Tag", "FeeType")
                        .WithMany()
                        .HasForeignKey("FeeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderFees")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FeeType");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrderLineItem", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.ManufacturerProducts.Entities.ManufacturerProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderLineItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Rebates.Entities.ManufacturerRebate", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Rebates.Entities.RebateCondition", "Condition")
                        .WithMany()
                        .HasForeignKey("RebateConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailOrders.Entities.RetailOrder", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "CustomerCompany")
                        .WithMany("CustomerRetailOrders")
                        .HasForeignKey("CustomerCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "RetailerCompany")
                        .WithMany("RetailOrders")
                        .HasForeignKey("RetailerCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Horizen.Data.Domain.RetailOrders.Entities.RetailOrderExtendedProperties", "ExtendedProperties", b1 =>
                        {
                            b1.Property<int>("RetailOrderId")
                                .HasColumnType("integer");

                            b1.Property<string>("Version")
                                .HasColumnType("text");

                            b1.HasKey("RetailOrderId");

                            b1.ToTable("RetailOrders");

                            b1.WithOwner()
                                .HasForeignKey("RetailOrderId");
                        });

                    b.Navigation("CustomerCompany");

                    b.Navigation("ExtendedProperties")
                        .IsRequired();

                    b.Navigation("RetailerCompany");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailOrders.Entities.RetailOrderComponentOverride", b =>
                {
                    b.HasOne("Horizen.Data.Domain.RetailerProducts.Entities.RetailerProductComponent", "OrderComponent")
                        .WithMany()
                        .HasForeignKey("OrderComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.RetailOrders.Entities.RetailOrderLineItem", "OrderItem")
                        .WithMany("OrderComponentOverrides")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderComponent");

                    b.Navigation("OrderItem");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailOrders.Entities.RetailOrderFieldInfo", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Tag", "Crop")
                        .WithMany()
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Fields.Entities.Field", "Field")
                        .WithMany("RetailOrdersByField")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.RetailOrders.Entities.RetailOrder", "Order")
                        .WithMany("RetailOrderFields")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Crop");

                    b.Navigation("Field");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailOrders.Entities.RetailOrderItemTag", b =>
                {
                    b.HasOne("Horizen.Data.Domain.RetailOrders.Entities.RetailOrderLineItem", "OrderItem")
                        .WithMany("OrderItemTags")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailOrders.Entities.RetailOrderLineItem", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Tag", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.RetailOrders.Entities.RetailOrder", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Horizen.Data.Domain.RetailerProducts.Entities.RetailerProduct", "RetailerProduct")
                        .WithMany()
                        .HasForeignKey("RetailerProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.RetailOrders.Entities.RetailOrderLineItemSchedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ItemType");

                    b.Navigation("Order");

                    b.Navigation("Package");

                    b.Navigation("RetailerProduct");

                    b.Navigation("Schedule");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailOrders.Entities.RetailOrderTag", b =>
                {
                    b.HasOne("Horizen.Data.Domain.RetailOrders.Entities.RetailOrder", "Order")
                        .WithMany("OrderTags")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailerProducts.Entities.RetailerProduct", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "RetailerCompany")
                        .WithMany("RetailerProducts")
                        .HasForeignKey("RetailerCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RetailerCompany");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailerProducts.Entities.RetailerProductComponent", b =>
                {
                    b.HasOne("Horizen.Data.Domain.ManufacturerProducts.Entities.ManufacturerProduct", "ManufacturerProduct")
                        .WithMany()
                        .HasForeignKey("ManufacturerProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.RetailerProducts.Entities.RetailerProduct", "RetailerProduct")
                        .WithMany("Components")
                        .HasForeignKey("RetailerProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ManufacturerProduct");

                    b.Navigation("RetailerProduct");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailerProducts.Entities.RetailerProductComponentCost", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.RetailerProducts.Entities.RetailerProductComponent", "RetailerProductComponent")
                        .WithMany("RetailerProductComponentCosts")
                        .HasForeignKey("RetailerProductComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.RetailerProducts.Entities.RetailerProduct", "RetailerProduct")
                        .WithMany()
                        .HasForeignKey("RetailerProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("RetailerProduct");

                    b.Navigation("RetailerProductComponent");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailerProducts.Entities.RetailerProductPrice", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.RetailerProducts.Entities.RetailerProduct", "RetailerProduct")
                        .WithMany("Prices")
                        .HasForeignKey("RetailerProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("RetailerProduct");
                });

            modelBuilder.Entity("Horizen.Data.Domain.UserRoles.Entities.UserRole", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "Company")
                        .WithMany("UserRoles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Users.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Users.Entities.ExternalUser", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Users.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Users.Entities.User", b =>
                {
                    b.HasOne("Horizen.Data.Domain.UserRoles.Entities.UserRole", "SelectedUserRole")
                        .WithMany()
                        .HasForeignKey("SelectedUserRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SelectedUserRole");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Users.Entities.UserAddress", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Common.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Users.Entities.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Users.Entities.UserInvite", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Users.Entities.UserPhoneNumber", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Common.Entities.PhoneNumber", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Users.Entities.User", "User")
                        .WithMany("UserPhoneNumbers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PhoneNumber");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Users.Entities.UserSettings", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Users.Entities.User", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("Horizen.Data.Domain.Users.Entities.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Users.Entities.UserTag", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Users.Entities.User", "User")
                        .WithMany("UserTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Warehouses.Entities.StorageLocation", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Warehouses.Entities.StorageLocation", "ParentStorageLocation")
                        .WithMany("ChildStorageLocations")
                        .HasForeignKey("ParentStorageLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Horizen.Data.Domain.Configurations.Entities.Tag", "StorageLocationType")
                        .WithMany()
                        .HasForeignKey("StorageLocationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Warehouses.Entities.Warehouse", "Warehouse")
                        .WithMany("StorageLocations")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentStorageLocation");

                    b.Navigation("StorageLocationType");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Warehouses.Entities.Warehouse", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Companies.Entities.Company", "RetailerCompany")
                        .WithMany("Warehouses")
                        .HasForeignKey("RetailerCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RetailerCompany");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Warehouses.Entities.WarehouseAddress", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Common.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Warehouses.Entities.Warehouse", "Warehouse")
                        .WithMany("WarehouseAddresses")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Warehouses.Entities.WarehousePhoneNumber", b =>
                {
                    b.HasOne("Horizen.Data.Domain.Common.Entities.PhoneNumber", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Horizen.Data.Domain.Warehouses.Entities.Warehouse", "Warehouse")
                        .WithMany("WarehousePhoneNumbers")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PhoneNumber");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Accounts.Entities.BillingAccount", b =>
                {
                    b.Navigation("JournalEntries");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Billing.Entities.BillingSplitGroup", b =>
                {
                    b.Navigation("BillingSplitGroupAccounts");

                    b.Navigation("EnterpriseItems");

                    b.Navigation("SplitItems");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Billing.Entities.BillingSplitItem", b =>
                {
                    b.Navigation("BillingAccountSplitAllocations");

                    b.Navigation("ChildSplitItems");

                    b.Navigation("SplitGroups");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Companies.Entities.Company", b =>
                {
                    b.Navigation("BillingSplitGroupAccounts");

                    b.Navigation("ChildCompanies");

                    b.Navigation("CompanyAddresses");

                    b.Navigation("CompanyExternalServiceAccounts");

                    b.Navigation("CompanyFeatures");

                    b.Navigation("CompanyPhoneNumbers");

                    b.Navigation("CompanyPresets");

                    b.Navigation("CompanyTags");

                    b.Navigation("CustomerRetailOrders");

                    b.Navigation("EnterpriseItems");

                    b.Navigation("Fields");

                    b.Navigation("FirstCompanyRelationships");

                    b.Navigation("ManufacturerProducts");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("RetailOrders");

                    b.Navigation("RetailerProducts");

                    b.Navigation("SecondCompanyRelationships");

                    b.Navigation("UserRoles");

                    b.Navigation("VendorPurchaseOrders");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("Horizen.Data.Domain.CompanyRelationships.Entities.CompanyRelationship", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("CompanyRelationshipTags");

                    b.Navigation("CustomerDeliveryLocations");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Configurations.Entities.Package", b =>
                {
                    b.Navigation("DependentPackages");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Configurations.Entities.TagCategory", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Configurations.Entities.UnitOfMeasurement", b =>
                {
                    b.Navigation("DependentUnits");

                    b.Navigation("Packages");
                });

            modelBuilder.Entity("Horizen.Data.Domain.CustomerDeliveryLocations.Entities.CustomerDeliveryLocation", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Fields.Entities.Field", b =>
                {
                    b.Navigation("FieldTags");

                    b.Navigation("FieldVersions");

                    b.Navigation("RetailOrdersByField");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Fields.Entities.FieldLayer", b =>
                {
                    b.Navigation("FieldLayerZones");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Fields.Entities.FieldVersion", b =>
                {
                    b.Navigation("FieldLayers");

                    b.Navigation("FieldVersionTags");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Freight.Entities.FreightProvider", b =>
                {
                    b.Navigation("FreightRates");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Freight.Entities.FreightZone", b =>
                {
                    b.Navigation("Rates");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Inventory.Entities.InventoryItem", b =>
                {
                    b.Navigation("LedgerEntries");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Inventory.Entities.InventoryItemLotInfo", b =>
                {
                    b.Navigation("BarCodeEntries");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Inventory.Entities.InventoryTransactionLedgerEntry", b =>
                {
                    b.Navigation("InventoryItemLots");
                });

            modelBuilder.Entity("Horizen.Data.Domain.ManufacturerProducts.Entities.ManufacturerProduct", b =>
                {
                    b.Navigation("Prices");

                    b.Navigation("ProductAvailabilities");

                    b.Navigation("ProductDocuments");
                });

            modelBuilder.Entity("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderApprovers");

                    b.Navigation("PurchaseOrderDiscounts");

                    b.Navigation("PurchaseOrderFees");

                    b.Navigation("PurchaseOrderLineItems");
                });

            modelBuilder.Entity("Horizen.Data.Domain.PurchaseOrders.Entities.PurchaseOrderLineItem", b =>
                {
                    b.Navigation("PurchaseOrderDiscounts");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailOrders.Entities.RetailOrder", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("OrderTags");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("RetailOrderFields");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailOrders.Entities.RetailOrderLineItem", b =>
                {
                    b.Navigation("OrderComponentOverrides");

                    b.Navigation("OrderItemTags");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailerProducts.Entities.RetailerProduct", b =>
                {
                    b.Navigation("Components");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("Horizen.Data.Domain.RetailerProducts.Entities.RetailerProductComponent", b =>
                {
                    b.Navigation("RetailerProductComponentCosts");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Users.Entities.User", b =>
                {
                    b.Navigation("UserAddresses");

                    b.Navigation("UserPhoneNumbers");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSettings");

                    b.Navigation("UserTags");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Warehouses.Entities.StorageLocation", b =>
                {
                    b.Navigation("ChildStorageLocations");
                });

            modelBuilder.Entity("Horizen.Data.Domain.Warehouses.Entities.Warehouse", b =>
                {
                    b.Navigation("StorageLocations");

                    b.Navigation("WarehouseAddresses");

                    b.Navigation("WarehousePhoneNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
